name: Run tests

on:
  push:
    paths: ['src/**']
  pull_request:
    paths: ['src/**']
  workflow_dispatch:

jobs:
  run-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '23'

      - uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven-

      - name: Set up services
        run: cd infra/docker_compose && bash restart_docker.sh && cd ../..

      - name: Verify (build+test+checkstyle)
        run: chmod +x ./mvnw && ./mvnw -q verify
        env:
          APIBASEURL: http://localhost:4111
          UIBASEURL: http://nginx:80

      - name: Run Swagger coverage
        if: always()
        run: |
          chmod +x ./.swagger-coverage-commandline/bin/swagger-coverage-commandline
          ./.swagger-coverage-commandline/bin/swagger-coverage-commandline \
            -s http://localhost:4111/v3/api-docs \
            -i target/swagger-coverage-output

      - name: Load test report history
        uses: actions/checkout@v2
        if: always()
        with:
          ref: gh-pages
          path: gh-pages

      - name: Build test report
        uses: simple-elf/allure-report-action@v1.7
        if: always()
        with:
          gh_pages: gh-pages
          allure_results: target/allure-results
          allure_history: allure-history

      - name: API coverage quality gate (>=50%)
        if: always()
        run: |
          sudo apt-get update -y && sudo apt-get install -y jq
          
          # Ищем JSON с покрытием (возможные места)
          CANDIDATES=(
            "allure-history/${GITHUB_RUN_NUMBER}/widgets/swagger-coverage.json"
            "allure-history/${GITHUB_RUN_NUMBER}/widgets/coverage.json"
            "allure-report/widgets/swagger-coverage.json"
            "allure-report/widgets/coverage.json"
            "target/allure-report/widgets/swagger-coverage.json"
            "target/allure-report/widgets/coverage.json"
            "target/allure-results/swagger-coverage.json"
          )
          FILE=""
          for f in "${CANDIDATES[@]}"; do
            if [ -f "$f" ]; then FILE="$f"; break; fi
          done
          if [ -z "$FILE" ]; then
            echo "Coverage JSON not found in known locations"; exit 1
          fi
          echo "Using coverage file: $FILE"
          
          # Пытаемся достать процент (в %). Поддерживаем разные схемы JSON.
          PCT=$(jq -r '( .coverage // .total.coverage // .summary.coverage // .coverage.total ) // empty' "$FILE")
          if [ -z "$PCT" ] || [ "$PCT" = "null" ]; then
            C=$(jq -r '.covered // .stats.covered // .summary.covered // empty' "$FILE")
            T=$(jq -r '.total   // .stats.total   // .summary.total   // empty' "$FILE")
            if [ -n "$C" ] && [ -n "$T" ] && [ "$T" -gt 0 ]; then
              PCT=$(awk -v c="$C" -v t="$T" 'BEGIN{ printf "%.2f", (c/t)*100 }')
            fi
          fi
          if [ -z "$PCT" ]; then
            echo "Could not parse coverage from $FILE"; cat "$FILE"; exit 1
          fi
          
          # Если значение в долях (<=1), переводим в проценты и проверяем порог 50%
          awk -v p="$PCT" -v t="50" 'BEGIN{
            if (p<=1) p*=100;
            if (p<t) { printf "❌ API coverage %.2f%% < %d%%\n", p, t; exit 1 }
            else     { printf "✅ API coverage %.2f%% >= %d%%\n", p, t; exit 0 }
          }'

      - name: Build Swagger coverage report
        if: always()
        run: sudo cp swagger-coverage-report.html allure-history/${{ github.run_number }}

      - name: Publish test report
        uses: peaceiris/actions-gh-pages@v3
        if: always()
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_branch: gh-pages
          publish_dir: allure-history

      - name: Build & push Docker image
        run: |
          chmod +x ./push-tests.sh
          DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }} \
          DOCKERHUB_TOKEN=${{ secrets.DOCKERHUB_TOKEN }} \
          ./push-tests.sh

      - name: Clean up services
        if: always()
        run: cd infra/docker_compose && docker compose down
